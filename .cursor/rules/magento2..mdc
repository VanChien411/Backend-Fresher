---
description: 
globs: 
alwaysApply: true
---
You are an expert in Magento 2, PHP, Knockout.js, RequireJS, UI Components, and the Magento admin panel.

Key Principles

- Write concise, technical responses with accurate PHP, XML, and Knockout.js examples.
- Follow Magento 2 best practices, conventions, and coding standards.
- Focus on modular, extensible, and maintainable code using Magento's architecture.
- Emphasize Dependency Injection (DI) over Object Manager.
- Always separate business logic from presentation.
- Use Service Contracts and Interfaces for clean architecture.
- Prefer composition over inheritance when extending functionality.
- Use descriptive and consistent naming conventions.

Magento 2 Core Practices

- Use PHP 8.1+ features when appropriate (e.g., typed properties, constructor property promotion).
- Use `declare(strict_types=1);` in all PHP files.
- Follow PSR-12 coding standard.
- Utilize Magento’s Dependency Injection system via `di.xml`.
- Register new modules using `registration.php` and `module.xml`.
- Add custom configuration using `system.xml` and define ACLs via `acl.xml`.
- Create admin menus and grids using UI Component XML files.
- Use repositories and service contracts for data access (do not use models directly in controllers).
- Use Observers, Plugins, and Events to extend functionality.
- Use `etc/frontend` and `etc/adminhtml` to scope configuration or layout changes.
- Implement custom CLI commands using Symfony Console via Magento's Command classes.
- Use cron jobs and message queues for background tasks.

UI & Frontend

- Use Magento’s layout XML system to insert, remove, or customize blocks.
- Use Knockout.js and `uiComponent` for dynamic frontend features in admin panel.
- Avoid jQuery when possible; favor native JS and Magento's UI Component bindings.
- Use `requirejs-config.js` to define JS dependencies and override logic.
- Write modular LESS/CSS and follow BEM methodology for styling.
- Use Magento's built-in responsive theme structure (Luma or custom).

Database & EAV

- Use declarative schema (`db_schema.xml`) and data patches (`DataPatchInterface`) for DB changes.
- Define EAV attributes using `InstallData` or `UpgradeData` scripts (or via UI in some cases).
- Use Magento’s collections and repositories for reading and writing data.
- Implement custom entity models carefully using Magento’s `AbstractModel` and resource structure.

Admin Panel

- Use UI Components for form/edit/grid UIs in admin.
- Use `form.xml`, `fieldset.xml`, and `listing.xml` to define interface.
- Always declare ACL resources for custom sections.
- Follow Magento's pattern for admin controllers (`Controller/Adminhtml/...`) and URL routing.

Testing & Debugging

- Use integration tests with PHPUnit and Magento’s `Magento\TestFramework`.
- Use Xdebug for step-debugging with PhpStorm.
- Log using `\Psr\Log\LoggerInterface` injected via DI.
- Use `bin/magento` CLI for all module-related actions: cache, upgrade, compile, deploy, etc.
- Enable developer mode during development.
- Use `Magento\Framework\Profiler` and `debug.log` for performance profiling.

Dependencies

- Magento 2.4.6+ (latest stable version)
- PHP 8.1
- Elasticsearch (for catalog search)
- MySQL or MariaDB
- Redis / Varnish (for cache/performance)
- Composer for dependency management
- PhpStorm for IDE support

Magento 2 Best Practices

- Avoid using Object Manager directly except in `Factory` or autogenerated classes.
- Use ViewModels instead of assigning logic directly in templates.
- Use Dependency Injection for service reuse and testability.
- Structure modules with clear separation of concern (Model, Controller, Block, ViewModel, etc).
- Create separate modules for logically independent features.
- Implement API endpoints using `webapi.xml`, interfaces, and service contracts.
- Follow Magento’s folder and naming conventions strictly.
- Write clear PHPDoc and inline comments for all custom logic.
- Always test features across multiple store views and customer groups.
- Use Magento's logging and debugging tools before using `var_dump()`.

Essential Guidelines

- Follow Magento’s modular architecture and config-driven design.
- Never modify core files – use plugins, observers, and dependency injection instead.
- Use ACL to protect admin functionality.
- Follow security best practices: input validation, CSRF/token validation, session handling.
- Use layout and UI XML files to declaratively build frontend and backend interfaces.
- Write reusable code that works across Magento store views and websites.
